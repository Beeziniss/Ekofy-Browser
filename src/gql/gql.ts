/* eslint-disable */
import * as types from './graphql';



/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query Users($where: UserFilterInput) {\n    users(where: $where) {\n      items {\n        id\n        email\n        fullName\n        gender\n        birthDate\n        role\n        phoneNumber\n        status\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.UsersDocument,
    "\n  query UsersList($skip: Int, $take: Int, $where: UserFilterInput) {\n    users(skip: $skip, take: $take, where: $where) {\n      totalCount\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n      items {\n        id\n        email\n        fullName\n        gender\n        birthDate\n        role\n        phoneNumber\n        status\n        isLinkedWithGoogle\n        stripeCustomerId\n        stripeAccountId\n        lastLoginAt\n        createdAt\n        updatedAt\n      }\n    }\n    artists {\n      items {\n        id\n        userId\n        stageName\n        email\n        artistType\n        categoryIds\n        biography\n        followerCount\n        popularity\n        avatarImage\n        bannerImage\n        isVerified\n        verifiedAt\n        createdAt\n        updatedAt\n        members {\n          fullName\n          email\n          phoneNumber\n          isLeader\n          gender\n        }\n        identityCard {\n          number\n          fullName\n          dateOfBirth\n          gender\n          placeOfOrigin\n          nationality\n          validUntil\n          placeOfResidence {\n            street\n            ward\n            province\n            oldDistrict\n            oldWard\n            oldProvince\n            addressLine\n          }\n        }\n      }\n    }\n    listeners {\n      items {\n        id\n        userId\n        displayName\n        email\n        avatarImage\n        bannerImage\n        isVerified\n        verifiedAt\n        followerCount\n        followingCount\n        lastFollowers\n        lastFollowing\n        createdAt\n        updatedAt\n        restriction {\n          type\n          reason\n          restrictedAt\n          expired\n        }\n      }\n    }\n  }\n": typeof types.UsersListDocument,
    "\n  mutation CreateModerator(\n    $createModeratorRequest: CreateModeratorRequestInput!\n  ) {\n    createModerator(createModeratorRequest: $createModeratorRequest)\n  }\n": typeof types.CreateModeratorDocument,
    "\n  mutation banUser($targetUserId: String!) {\n    banUser(targetUserId: $targetUserId)\n  }\n": typeof types.BanUserDocument,
    "\n  mutation ReActiveUser($targetUserId: String!) {\n    reActiveUser(targetUserId: $targetUserId)\n  }\n": typeof types.ReActiveUserDocument,
    "\n  query TracksWithFilters(\n    $skip: Int!\n    $take: Int!\n    $where: TrackFilterInput\n    $order: [TrackSortInput!]\n  ) {\n    tracks(skip: $skip, take: $take, where: $where, order: $order) {\n      totalCount\n      items {\n        id\n        name\n        mainArtistIds\n        streamCount\n        favoriteCount\n        coverImage\n        isExplicit\n        releaseInfo {\n          releaseDate\n          isReleased\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n": typeof types.TracksWithFiltersDocument,
    "\n  query TrackListHome($take: Int!) {\n    tracks(take: $take) {\n      totalCount\n      items {\n        id\n        name\n        coverImage\n        mainArtistIds\n        artist {\n          id\n          stageName\n        }\n      }\n    }\n  }\n": typeof types.TrackListHomeDocument,
    "\n    query SearchArtists($skip: Int, $take: Int, $contains: String) {\n        artists(skip: $skip, take: $take, where: { stageNameUnsigned: { contains: $contains } }) {\n            totalCount\n            items {\n                id\n                userId\n                stageName\n                stageNameUnsigned\n                email\n                artistType\n                avatarImage\n                followerCount\n                user {\n                    fullName\n                    role\n                }\n            }\n                pageInfo {\n            hasNextPage\n            hasPreviousPage\n        }\n        }\n    }\n": typeof types.SearchArtistsDocument,
    "\n    query SearchListeners($skip: Int, $take: Int, $contains: String) {\n        listeners(skip: $skip, take: $take, where: { displayNameUnsigned: { contains: $contains } }) {\n            totalCount\n            items {\n                id\n                userId\n                displayName\n                displayNameUnsigned\n                email\n                avatarImage\n                followerCount\n                followingCount\n                user {\n                    fullName\n                    role\n                }\n            }\n                pageInfo {\n            hasNextPage\n            hasPreviousPage\n        }\n        }\n    }\n": typeof types.SearchListenersDocument,
    "\n    query SearchTracks($skip: Int, $take: Int, $contains: String) {\n        tracks(skip: $skip, take: $take, where: { nameUnsigned: { contains: $contains } }) {\n            totalCount\n            items {\n                id\n                name\n                description\n                nameUnsigned\n                type\n                categoryIds\n                mainArtistIds\n                coverImage\n                restriction {\n                    type\n                }\n                artist {\n                    id\n                    userId\n                    stageName\n                    artistType\n                }  \n            }\n                pageInfo {\n            hasNextPage\n            hasPreviousPage\n        }\n        }\n    }\n": typeof types.SearchTracksDocument,
    "\n    query SearchPlaylists($skip: Int, $take: Int, $contains: String) {\n        playlists(skip: $skip, take: $take, where: { nameUnsigned: { contains: $contains } }) {\n            totalCount\n            items {\n                id\n                userId\n                name\n                nameUnsigned\n                tracksInfo {\n                    trackId\n                    addedTime\n                }\n                coverImage\n                isPublic\n                user {\n                    id\n                    fullName\n                }\n            }\n                pageInfo {\n            hasNextPage\n            hasPreviousPage\n        }\n        }\n    }\n": typeof types.SearchPlaylistsDocument,
    "\n  query TrackDetail($trackId: String!) {\n    tracks(where: { id: { eq: $trackId } }) {\n      items {\n        id\n        name\n        coverImage\n        favoriteCount\n        streamCount\n        mainArtistIds\n        artist {\n          id\n          stageName\n          followerCount\n        }\n      }\n    }\n  }\n": typeof types.TrackDetailDocument,
    "\n  query PendingArtistRegistrationsView($pageNumber: Int!, $pageSize: Int!) {\n    pendingArtistRegistrations(pageNumber: $pageNumber, pageSize: $pageSize) {\n      email\n      fullName\n      stageName\n      artistType\n      gender\n      birthDate\n      phoneNumber\n      avatarImage\n      id\n    }\n  }\n": typeof types.PendingArtistRegistrationsViewDocument,
    "\n  query PendingArtistRegistrationsDetail($id: String) {\n    pendingArtistRegistrations(where: { id: { eq: $id } }) {\n      email\n      fullName\n      stageName\n      artistType\n      gender\n      birthDate\n      phoneNumber\n      avatarImage\n      id\n      members {\n        fullName\n        email\n        phoneNumber\n        isLeader\n        gender\n      }\n      requestedAt\n      timeToLive\n      identityCardNumber\n      identityCardDateOfBirth\n      identityCardFullName\n      placeOfOrigin\n      placeOfResidence\n      frontImageUrl\n      backImageUrl\n    }\n  }\n": typeof types.PendingArtistRegistrationsDetailDocument,
    "\n  mutation ApproveArtistRegistration($request: ArtistRegistrationApprovalRequestInput!) {\n    approveArtistRegistration(request: $request)\n  }\n": typeof types.ApproveArtistRegistrationDocument,
    "\n  mutation RejectArtistRegistration($request: ArtistRegistrationApprovalRequestInput!) {\n    rejectArtistRegistration(request: $request)\n  }\n": typeof types.RejectArtistRegistrationDocument,
    "\n    query ModeratorArtistDetail($id: String) {\n        artists(where: { userId: { eq: $id } }) {\n            totalCount\n            items {\n                id\n                userId\n                stageName\n                email\n                artistType\n                members {\n                    fullName\n                    email\n                    phoneNumber\n                    isLeader\n                    gender\n                }\n                categoryIds\n                biography\n                followerCount\n                popularity\n                avatarImage\n                bannerImage\n                isVerified\n                verifiedAt\n                identityCard {\n                    number\n                    fullName\n                    dateOfBirth\n                    gender\n                    placeOfOrigin\n                    nationality\n                    validUntil\n                    placeOfResidence {\n                        street\n                        ward\n                        province\n                        oldDistrict\n                        oldWard\n                        oldProvince\n                        addressLine\n                    }\n                }\n                createdAt\n                user {\n                    fullName\n                    role\n                    phoneNumber\n                }\n            }\n        }\n    }\n": typeof types.ModeratorArtistDetailDocument,
    "\n    query ModeratorListenerDetail($id: String) {\n        listeners(where: { userId: { eq: $id } }) {\n            items {\n                id\n                userId\n                displayName\n                email\n                avatarImage\n                bannerImage\n                isVerified\n                verifiedAt\n                followerCount\n                followingCount\n                createdAt\n                restriction {\n                    type\n                    reason\n                    restrictedAt\n                    expired\n                }\n                user {\n                    fullName\n                }\n            }\n        }\n    }\n": typeof types.ModeratorListenerDetailDocument,
    "\n    query ModeratorUsersList($skip: Int, $take: Int, $where: UserFilterInput) {\n        users(skip: $skip, take: $take, where: $where) {\n            totalCount\n            pageInfo {\n                hasNextPage\n                hasPreviousPage\n            }\n            items {\n                id\n                email\n                fullName\n                gender\n                birthDate\n                role\n                phoneNumber\n                status\n                isLinkedWithGoogle\n                stripeCustomerId\n                stripeAccountId\n                lastLoginAt\n                createdAt\n                updatedAt\n            }\n        }\n        artists {\n            items {\n                id\n                userId\n                stageName\n                email\n                artistType\n                categoryIds\n                biography\n                followerCount\n                popularity\n                avatarImage\n                bannerImage\n                isVerified\n                verifiedAt\n                createdAt\n                updatedAt\n                members {\n                    fullName\n                    email\n                    phoneNumber\n                    isLeader\n                    gender\n                }\n                identityCard {\n                    number\n                    fullName\n                    dateOfBirth\n                    gender\n                    placeOfOrigin\n                    nationality\n                    validUntil\n                    placeOfResidence {\n                        street\n                        ward\n                        province\n                        oldDistrict\n                        oldWard\n                        oldProvince\n                        addressLine\n                    }\n                }\n            }\n        }\n        listeners {\n            items {\n                id\n                userId\n                displayName\n                email\n                avatarImage\n                bannerImage\n                isVerified\n                verifiedAt\n                followerCount\n                followingCount\n                lastFollowers\n                lastFollowing\n                createdAt\n                updatedAt\n                restriction {\n                    type\n                    reason\n                    restrictedAt\n                    expired\n                }\n            }\n        }\n    }\n": typeof types.ModeratorUsersListDocument,
};
const documents: Documents = {
    "\n  query Users($where: UserFilterInput) {\n    users(where: $where) {\n      items {\n        id\n        email\n        fullName\n        gender\n        birthDate\n        role\n        phoneNumber\n        status\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.UsersDocument,
    "\n  query UsersList($skip: Int, $take: Int, $where: UserFilterInput) {\n    users(skip: $skip, take: $take, where: $where) {\n      totalCount\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n      items {\n        id\n        email\n        fullName\n        gender\n        birthDate\n        role\n        phoneNumber\n        status\n        isLinkedWithGoogle\n        stripeCustomerId\n        stripeAccountId\n        lastLoginAt\n        createdAt\n        updatedAt\n      }\n    }\n    artists {\n      items {\n        id\n        userId\n        stageName\n        email\n        artistType\n        categoryIds\n        biography\n        followerCount\n        popularity\n        avatarImage\n        bannerImage\n        isVerified\n        verifiedAt\n        createdAt\n        updatedAt\n        members {\n          fullName\n          email\n          phoneNumber\n          isLeader\n          gender\n        }\n        identityCard {\n          number\n          fullName\n          dateOfBirth\n          gender\n          placeOfOrigin\n          nationality\n          validUntil\n          placeOfResidence {\n            street\n            ward\n            province\n            oldDistrict\n            oldWard\n            oldProvince\n            addressLine\n          }\n        }\n      }\n    }\n    listeners {\n      items {\n        id\n        userId\n        displayName\n        email\n        avatarImage\n        bannerImage\n        isVerified\n        verifiedAt\n        followerCount\n        followingCount\n        lastFollowers\n        lastFollowing\n        createdAt\n        updatedAt\n        restriction {\n          type\n          reason\n          restrictedAt\n          expired\n        }\n      }\n    }\n  }\n": types.UsersListDocument,
    "\n  mutation CreateModerator(\n    $createModeratorRequest: CreateModeratorRequestInput!\n  ) {\n    createModerator(createModeratorRequest: $createModeratorRequest)\n  }\n": types.CreateModeratorDocument,
    "\n  mutation banUser($targetUserId: String!) {\n    banUser(targetUserId: $targetUserId)\n  }\n": types.BanUserDocument,
    "\n  mutation ReActiveUser($targetUserId: String!) {\n    reActiveUser(targetUserId: $targetUserId)\n  }\n": types.ReActiveUserDocument,
    "\n  query TracksWithFilters(\n    $skip: Int!\n    $take: Int!\n    $where: TrackFilterInput\n    $order: [TrackSortInput!]\n  ) {\n    tracks(skip: $skip, take: $take, where: $where, order: $order) {\n      totalCount\n      items {\n        id\n        name\n        mainArtistIds\n        streamCount\n        favoriteCount\n        coverImage\n        isExplicit\n        releaseInfo {\n          releaseDate\n          isReleased\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n": types.TracksWithFiltersDocument,
    "\n  query TrackListHome($take: Int!) {\n    tracks(take: $take) {\n      totalCount\n      items {\n        id\n        name\n        coverImage\n        mainArtistIds\n        artist {\n          id\n          stageName\n        }\n      }\n    }\n  }\n": types.TrackListHomeDocument,
    "\n    query SearchArtists($skip: Int, $take: Int, $contains: String) {\n        artists(skip: $skip, take: $take, where: { stageNameUnsigned: { contains: $contains } }) {\n            totalCount\n            items {\n                id\n                userId\n                stageName\n                stageNameUnsigned\n                email\n                artistType\n                avatarImage\n                followerCount\n                user {\n                    fullName\n                    role\n                }\n            }\n                pageInfo {\n            hasNextPage\n            hasPreviousPage\n        }\n        }\n    }\n": types.SearchArtistsDocument,
    "\n    query SearchListeners($skip: Int, $take: Int, $contains: String) {\n        listeners(skip: $skip, take: $take, where: { displayNameUnsigned: { contains: $contains } }) {\n            totalCount\n            items {\n                id\n                userId\n                displayName\n                displayNameUnsigned\n                email\n                avatarImage\n                followerCount\n                followingCount\n                user {\n                    fullName\n                    role\n                }\n            }\n                pageInfo {\n            hasNextPage\n            hasPreviousPage\n        }\n        }\n    }\n": types.SearchListenersDocument,
    "\n    query SearchTracks($skip: Int, $take: Int, $contains: String) {\n        tracks(skip: $skip, take: $take, where: { nameUnsigned: { contains: $contains } }) {\n            totalCount\n            items {\n                id\n                name\n                description\n                nameUnsigned\n                type\n                categoryIds\n                mainArtistIds\n                coverImage\n                restriction {\n                    type\n                }\n                artist {\n                    id\n                    userId\n                    stageName\n                    artistType\n                }  \n            }\n                pageInfo {\n            hasNextPage\n            hasPreviousPage\n        }\n        }\n    }\n": types.SearchTracksDocument,
    "\n    query SearchPlaylists($skip: Int, $take: Int, $contains: String) {\n        playlists(skip: $skip, take: $take, where: { nameUnsigned: { contains: $contains } }) {\n            totalCount\n            items {\n                id\n                userId\n                name\n                nameUnsigned\n                tracksInfo {\n                    trackId\n                    addedTime\n                }\n                coverImage\n                isPublic\n                user {\n                    id\n                    fullName\n                }\n            }\n                pageInfo {\n            hasNextPage\n            hasPreviousPage\n        }\n        }\n    }\n": types.SearchPlaylistsDocument,
    "\n  query TrackDetail($trackId: String!) {\n    tracks(where: { id: { eq: $trackId } }) {\n      items {\n        id\n        name\n        coverImage\n        favoriteCount\n        streamCount\n        mainArtistIds\n        artist {\n          id\n          stageName\n          followerCount\n        }\n      }\n    }\n  }\n": types.TrackDetailDocument,
    "\n  query PendingArtistRegistrationsView($pageNumber: Int!, $pageSize: Int!) {\n    pendingArtistRegistrations(pageNumber: $pageNumber, pageSize: $pageSize) {\n      email\n      fullName\n      stageName\n      artistType\n      gender\n      birthDate\n      phoneNumber\n      avatarImage\n      id\n    }\n  }\n": types.PendingArtistRegistrationsViewDocument,
    "\n  query PendingArtistRegistrationsDetail($id: String) {\n    pendingArtistRegistrations(where: { id: { eq: $id } }) {\n      email\n      fullName\n      stageName\n      artistType\n      gender\n      birthDate\n      phoneNumber\n      avatarImage\n      id\n      members {\n        fullName\n        email\n        phoneNumber\n        isLeader\n        gender\n      }\n      requestedAt\n      timeToLive\n      identityCardNumber\n      identityCardDateOfBirth\n      identityCardFullName\n      placeOfOrigin\n      placeOfResidence\n      frontImageUrl\n      backImageUrl\n    }\n  }\n": types.PendingArtistRegistrationsDetailDocument,
    "\n  mutation ApproveArtistRegistration($request: ArtistRegistrationApprovalRequestInput!) {\n    approveArtistRegistration(request: $request)\n  }\n": types.ApproveArtistRegistrationDocument,
    "\n  mutation RejectArtistRegistration($request: ArtistRegistrationApprovalRequestInput!) {\n    rejectArtistRegistration(request: $request)\n  }\n": types.RejectArtistRegistrationDocument,
    "\n    query ModeratorArtistDetail($id: String) {\n        artists(where: { userId: { eq: $id } }) {\n            totalCount\n            items {\n                id\n                userId\n                stageName\n                email\n                artistType\n                members {\n                    fullName\n                    email\n                    phoneNumber\n                    isLeader\n                    gender\n                }\n                categoryIds\n                biography\n                followerCount\n                popularity\n                avatarImage\n                bannerImage\n                isVerified\n                verifiedAt\n                identityCard {\n                    number\n                    fullName\n                    dateOfBirth\n                    gender\n                    placeOfOrigin\n                    nationality\n                    validUntil\n                    placeOfResidence {\n                        street\n                        ward\n                        province\n                        oldDistrict\n                        oldWard\n                        oldProvince\n                        addressLine\n                    }\n                }\n                createdAt\n                user {\n                    fullName\n                    role\n                    phoneNumber\n                }\n            }\n        }\n    }\n": types.ModeratorArtistDetailDocument,
    "\n    query ModeratorListenerDetail($id: String) {\n        listeners(where: { userId: { eq: $id } }) {\n            items {\n                id\n                userId\n                displayName\n                email\n                avatarImage\n                bannerImage\n                isVerified\n                verifiedAt\n                followerCount\n                followingCount\n                createdAt\n                restriction {\n                    type\n                    reason\n                    restrictedAt\n                    expired\n                }\n                user {\n                    fullName\n                }\n            }\n        }\n    }\n": types.ModeratorListenerDetailDocument,
    "\n    query ModeratorUsersList($skip: Int, $take: Int, $where: UserFilterInput) {\n        users(skip: $skip, take: $take, where: $where) {\n            totalCount\n            pageInfo {\n                hasNextPage\n                hasPreviousPage\n            }\n            items {\n                id\n                email\n                fullName\n                gender\n                birthDate\n                role\n                phoneNumber\n                status\n                isLinkedWithGoogle\n                stripeCustomerId\n                stripeAccountId\n                lastLoginAt\n                createdAt\n                updatedAt\n            }\n        }\n        artists {\n            items {\n                id\n                userId\n                stageName\n                email\n                artistType\n                categoryIds\n                biography\n                followerCount\n                popularity\n                avatarImage\n                bannerImage\n                isVerified\n                verifiedAt\n                createdAt\n                updatedAt\n                members {\n                    fullName\n                    email\n                    phoneNumber\n                    isLeader\n                    gender\n                }\n                identityCard {\n                    number\n                    fullName\n                    dateOfBirth\n                    gender\n                    placeOfOrigin\n                    nationality\n                    validUntil\n                    placeOfResidence {\n                        street\n                        ward\n                        province\n                        oldDistrict\n                        oldWard\n                        oldProvince\n                        addressLine\n                    }\n                }\n            }\n        }\n        listeners {\n            items {\n                id\n                userId\n                displayName\n                email\n                avatarImage\n                bannerImage\n                isVerified\n                verifiedAt\n                followerCount\n                followingCount\n                lastFollowers\n                lastFollowing\n                createdAt\n                updatedAt\n                restriction {\n                    type\n                    reason\n                    restrictedAt\n                    expired\n                }\n            }\n        }\n    }\n": types.ModeratorUsersListDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Users($where: UserFilterInput) {\n    users(where: $where) {\n      items {\n        id\n        email\n        fullName\n        gender\n        birthDate\n        role\n        phoneNumber\n        status\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): typeof import('./graphql').UsersDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UsersList($skip: Int, $take: Int, $where: UserFilterInput) {\n    users(skip: $skip, take: $take, where: $where) {\n      totalCount\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n      items {\n        id\n        email\n        fullName\n        gender\n        birthDate\n        role\n        phoneNumber\n        status\n        isLinkedWithGoogle\n        stripeCustomerId\n        stripeAccountId\n        lastLoginAt\n        createdAt\n        updatedAt\n      }\n    }\n    artists {\n      items {\n        id\n        userId\n        stageName\n        email\n        artistType\n        categoryIds\n        biography\n        followerCount\n        popularity\n        avatarImage\n        bannerImage\n        isVerified\n        verifiedAt\n        createdAt\n        updatedAt\n        members {\n          fullName\n          email\n          phoneNumber\n          isLeader\n          gender\n        }\n        identityCard {\n          number\n          fullName\n          dateOfBirth\n          gender\n          placeOfOrigin\n          nationality\n          validUntil\n          placeOfResidence {\n            street\n            ward\n            province\n            oldDistrict\n            oldWard\n            oldProvince\n            addressLine\n          }\n        }\n      }\n    }\n    listeners {\n      items {\n        id\n        userId\n        displayName\n        email\n        avatarImage\n        bannerImage\n        isVerified\n        verifiedAt\n        followerCount\n        followingCount\n        lastFollowers\n        lastFollowing\n        createdAt\n        updatedAt\n        restriction {\n          type\n          reason\n          restrictedAt\n          expired\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').UsersListDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateModerator(\n    $createModeratorRequest: CreateModeratorRequestInput!\n  ) {\n    createModerator(createModeratorRequest: $createModeratorRequest)\n  }\n"): typeof import('./graphql').CreateModeratorDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation banUser($targetUserId: String!) {\n    banUser(targetUserId: $targetUserId)\n  }\n"): typeof import('./graphql').BanUserDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ReActiveUser($targetUserId: String!) {\n    reActiveUser(targetUserId: $targetUserId)\n  }\n"): typeof import('./graphql').ReActiveUserDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TracksWithFilters(\n    $skip: Int!\n    $take: Int!\n    $where: TrackFilterInput\n    $order: [TrackSortInput!]\n  ) {\n    tracks(skip: $skip, take: $take, where: $where, order: $order) {\n      totalCount\n      items {\n        id\n        name\n        mainArtistIds\n        streamCount\n        favoriteCount\n        coverImage\n        isExplicit\n        releaseInfo {\n          releaseDate\n          isReleased\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n"): typeof import('./graphql').TracksWithFiltersDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TrackListHome($take: Int!) {\n    tracks(take: $take) {\n      totalCount\n      items {\n        id\n        name\n        coverImage\n        mainArtistIds\n        artist {\n          id\n          stageName\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').TrackListHomeDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query SearchArtists($skip: Int, $take: Int, $contains: String) {\n        artists(skip: $skip, take: $take, where: { stageNameUnsigned: { contains: $contains } }) {\n            totalCount\n            items {\n                id\n                userId\n                stageName\n                stageNameUnsigned\n                email\n                artistType\n                avatarImage\n                followerCount\n                user {\n                    fullName\n                    role\n                }\n            }\n                pageInfo {\n            hasNextPage\n            hasPreviousPage\n        }\n        }\n    }\n"): typeof import('./graphql').SearchArtistsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query SearchListeners($skip: Int, $take: Int, $contains: String) {\n        listeners(skip: $skip, take: $take, where: { displayNameUnsigned: { contains: $contains } }) {\n            totalCount\n            items {\n                id\n                userId\n                displayName\n                displayNameUnsigned\n                email\n                avatarImage\n                followerCount\n                followingCount\n                user {\n                    fullName\n                    role\n                }\n            }\n                pageInfo {\n            hasNextPage\n            hasPreviousPage\n        }\n        }\n    }\n"): typeof import('./graphql').SearchListenersDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query SearchTracks($skip: Int, $take: Int, $contains: String) {\n        tracks(skip: $skip, take: $take, where: { nameUnsigned: { contains: $contains } }) {\n            totalCount\n            items {\n                id\n                name\n                description\n                nameUnsigned\n                type\n                categoryIds\n                mainArtistIds\n                coverImage\n                restriction {\n                    type\n                }\n                artist {\n                    id\n                    userId\n                    stageName\n                    artistType\n                }  \n            }\n                pageInfo {\n            hasNextPage\n            hasPreviousPage\n        }\n        }\n    }\n"): typeof import('./graphql').SearchTracksDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query SearchPlaylists($skip: Int, $take: Int, $contains: String) {\n        playlists(skip: $skip, take: $take, where: { nameUnsigned: { contains: $contains } }) {\n            totalCount\n            items {\n                id\n                userId\n                name\n                nameUnsigned\n                tracksInfo {\n                    trackId\n                    addedTime\n                }\n                coverImage\n                isPublic\n                user {\n                    id\n                    fullName\n                }\n            }\n                pageInfo {\n            hasNextPage\n            hasPreviousPage\n        }\n        }\n    }\n"): typeof import('./graphql').SearchPlaylistsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TrackDetail($trackId: String!) {\n    tracks(where: { id: { eq: $trackId } }) {\n      items {\n        id\n        name\n        coverImage\n        favoriteCount\n        streamCount\n        mainArtistIds\n        artist {\n          id\n          stageName\n          followerCount\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').TrackDetailDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PendingArtistRegistrationsView($pageNumber: Int!, $pageSize: Int!) {\n    pendingArtistRegistrations(pageNumber: $pageNumber, pageSize: $pageSize) {\n      email\n      fullName\n      stageName\n      artistType\n      gender\n      birthDate\n      phoneNumber\n      avatarImage\n      id\n    }\n  }\n"): typeof import('./graphql').PendingArtistRegistrationsViewDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PendingArtistRegistrationsDetail($id: String) {\n    pendingArtistRegistrations(where: { id: { eq: $id } }) {\n      email\n      fullName\n      stageName\n      artistType\n      gender\n      birthDate\n      phoneNumber\n      avatarImage\n      id\n      members {\n        fullName\n        email\n        phoneNumber\n        isLeader\n        gender\n      }\n      requestedAt\n      timeToLive\n      identityCardNumber\n      identityCardDateOfBirth\n      identityCardFullName\n      placeOfOrigin\n      placeOfResidence\n      frontImageUrl\n      backImageUrl\n    }\n  }\n"): typeof import('./graphql').PendingArtistRegistrationsDetailDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ApproveArtistRegistration($request: ArtistRegistrationApprovalRequestInput!) {\n    approveArtistRegistration(request: $request)\n  }\n"): typeof import('./graphql').ApproveArtistRegistrationDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RejectArtistRegistration($request: ArtistRegistrationApprovalRequestInput!) {\n    rejectArtistRegistration(request: $request)\n  }\n"): typeof import('./graphql').RejectArtistRegistrationDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ModeratorArtistDetail($id: String) {\n        artists(where: { userId: { eq: $id } }) {\n            totalCount\n            items {\n                id\n                userId\n                stageName\n                email\n                artistType\n                members {\n                    fullName\n                    email\n                    phoneNumber\n                    isLeader\n                    gender\n                }\n                categoryIds\n                biography\n                followerCount\n                popularity\n                avatarImage\n                bannerImage\n                isVerified\n                verifiedAt\n                identityCard {\n                    number\n                    fullName\n                    dateOfBirth\n                    gender\n                    placeOfOrigin\n                    nationality\n                    validUntil\n                    placeOfResidence {\n                        street\n                        ward\n                        province\n                        oldDistrict\n                        oldWard\n                        oldProvince\n                        addressLine\n                    }\n                }\n                createdAt\n                user {\n                    fullName\n                    role\n                    phoneNumber\n                }\n            }\n        }\n    }\n"): typeof import('./graphql').ModeratorArtistDetailDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ModeratorListenerDetail($id: String) {\n        listeners(where: { userId: { eq: $id } }) {\n            items {\n                id\n                userId\n                displayName\n                email\n                avatarImage\n                bannerImage\n                isVerified\n                verifiedAt\n                followerCount\n                followingCount\n                createdAt\n                restriction {\n                    type\n                    reason\n                    restrictedAt\n                    expired\n                }\n                user {\n                    fullName\n                }\n            }\n        }\n    }\n"): typeof import('./graphql').ModeratorListenerDetailDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ModeratorUsersList($skip: Int, $take: Int, $where: UserFilterInput) {\n        users(skip: $skip, take: $take, where: $where) {\n            totalCount\n            pageInfo {\n                hasNextPage\n                hasPreviousPage\n            }\n            items {\n                id\n                email\n                fullName\n                gender\n                birthDate\n                role\n                phoneNumber\n                status\n                isLinkedWithGoogle\n                stripeCustomerId\n                stripeAccountId\n                lastLoginAt\n                createdAt\n                updatedAt\n            }\n        }\n        artists {\n            items {\n                id\n                userId\n                stageName\n                email\n                artistType\n                categoryIds\n                biography\n                followerCount\n                popularity\n                avatarImage\n                bannerImage\n                isVerified\n                verifiedAt\n                createdAt\n                updatedAt\n                members {\n                    fullName\n                    email\n                    phoneNumber\n                    isLeader\n                    gender\n                }\n                identityCard {\n                    number\n                    fullName\n                    dateOfBirth\n                    gender\n                    placeOfOrigin\n                    nationality\n                    validUntil\n                    placeOfResidence {\n                        street\n                        ward\n                        province\n                        oldDistrict\n                        oldWard\n                        oldProvince\n                        addressLine\n                    }\n                }\n            }\n        }\n        listeners {\n            items {\n                id\n                userId\n                displayName\n                email\n                avatarImage\n                bannerImage\n                isVerified\n                verifiedAt\n                followerCount\n                followingCount\n                lastFollowers\n                lastFollowing\n                createdAt\n                updatedAt\n                restriction {\n                    type\n                    reason\n                    restrictedAt\n                    expired\n                }\n            }\n        }\n    }\n"): typeof import('./graphql').ModeratorUsersListDocument;


export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}
